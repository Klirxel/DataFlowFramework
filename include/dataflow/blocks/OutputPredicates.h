#pragma once

/** @file OutputPredicates.h
 *  
 *  @brief Contains standard output predicates for \ref . 
 *         
 *  @details
 *  - Output predicates for dataflow::blocks::Block let you decide if output
 *    from operator of a block should be outputted on the channel.
 *  - This gives you the option to control on which channel
 *    output should be generated.
 *  - In other words this is a filter between the block operator and
 *    the operation pushing data to the output channels.
 *  - Filtering is done by analyzing each output value from the block
 *    operator.
 *  - One example is to hinder outputting data on  an channel when 
 *    the output data object is empty.
 *  - dataflow::blocks::OutputAll is the reference output predicate that does
 *    output on every channel. 
 */

#include <array>

namespace dataflow::blocks {

/**
 * @brief Default output predicate for blocks.
 *
 * @details 
 *  - Default output predicate for blocks.
 *  - Outputs to all channels.
 *  - Does not analyzing the blockOperatorOutput.
 *
 *  @param
 *   blockOperatorOuput... Output generated by the block operator for each channel (not used).
 *
 *
 */
struct OutputAll {
    template <typename... T>
    constexpr std::array<bool, sizeof...(T)> operator()([[maybe_unused]] const T&... blockOperatorOutput) const;
};

}

#include "OutputPredicates.hpp"
