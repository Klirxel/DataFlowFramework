#pragma once

#include <array>

/** @namespace dataflow::blocks::outputPredicates
 *  
 *  @brief Contains standard output predicates for Output-Blocks. 
 *         
 *  @details
 *  - Output predicates for Output-Blocks give you fine granular control
 *    if output on an (output-)channel should be performed.
 *  - Controlling is done for for each channel independently.
 *  - Decision is done by value analysis. 
 *  - One example is to hinder outputting data on  an channel when 
 *    the output data object is empty.
 *  - dataflow::blocks::outputPredicates::OutputAll is the reference output predicate that does
 *    output on every channel. 
 */
namespace dataflow::blocks::outputPredicates {

/**
 * @brief Default output predicate for blocks.
 *
 * @details 
 *  - Default output predicate for blocks.
 *  - Outputs to all channels.
 *  - Does not analyzing the blockOperatorOutput.
 *
 *  @param
 *   blockOperatorOuput... Output generated by the block operator for each channel (not used).
 *
 *
 */
struct OutputAll {
    template <typename... T>
    constexpr std::array<bool, sizeof...(T)> operator()([[maybe_unused]] const T&... blockOperatorOutput) const;
};

} //namespace dataflow::blocks::outputPredicates

#include "../impl/OutputPredicates.hpp"
